import { Request, Response } from 'express';
import IRequest from '../../interfaces/IRequest';
import Joi from 'joi';
import { logger } from '../../utility/logger';

import PushSubscription from '../../models/PushSubscription';

/**
 * @swagger
 * tags:
 *   name: PushSubscription
 *   description: Manage registering browser for push notifications.
*/

/**
 * @swagger
 * /push/subscribe:
 *   post:
 *     summary: Subscribe device for push notifications.
 *     tags: [PushSubscription]
 *     security:
 *       - ApiKeyAuth: []
 *     consumes:
 *       - application/json
 *     parameters:
 *       - in: body
 *         name: data
 *         description: Request body.
 *         schema:
 *           type: object
 *           required:
 *             - Ipk
 *           properties:
 *             endpoint:
 *               type: string
 *               description: Endpoint generated by browser push manager.
 *             expirationTime:
 *               type: string
 *               description: Expiration time generated by browser push manager.
 *             keys:
 *               type: object
 *               properties:
 *                 p256dh:
 *                   type: string
 *                   description: p256dh key generated by browser push manager.
 *                 auth:
 *                   type: string
 *                   description: auth key generated by browser push manager.
 *     responses:
 *       200:
 *         description: Successful response data
 *         schema:
 *           type: object
 *           properties:
 *             message:
 *               type: string
 *               description: Description of opperation.
 */
const subscribe = async (req: IRequest, res: Response) => {
  try {
    await Joi.object({
      endpoint: Joi.string().required(),
      keys: Joi.any().required(),
      expirationTime: Joi.any().required(),
    }).validateAsync(req.body);
  } catch(error) {
    return res.status(422).json({
      message: 'Missing entity',
      error: error
    });
  }
  
  try {
    await PushSubscription.deleteMany({ publicKey: req.userPubKey });

    await PushSubscription.create({
      publicKey: req.userPubKey, 
      endpoint: req.body.endpoint,
      expirationTime: req.body.expirationTime || 0,
      keys: {
        p256dh: req.body.keys.p256dh,
        auth: req.body.keys.auth
      }
    });
  
    res.status(200).json({
      message: 'Subscribed to push notifications.'
    });
  } catch (error) {
    console.error(error);
    logger.error(error);
    return res.status(500).json({
			message: 'Server error.',
		});
  }
};

/**
 * @swagger
 * /push/subscribe:
 *   delete:
 *     summary: Removes any push subscription belonging to a user.
 *     tags: [PushSubscription]
 *     security:
 *       - ApiKeyAuth: []
 *     responses:
 *       200:
 *         description: Successful response data
 *         schema:
 *           type: object
 *           properties:
 *             message:
 *               type: string
 *               description: Description of opperation.
 */
const unsubscribe = async (req: IRequest, res: Response) => {
  try {
    await PushSubscription.deleteMany({ publicKey: req.userPubKey });

    res.status(200).json({
      message: 'Unsubscribed to push notifications.'
    });
  } catch (error) {
    console.error(error);
    logger.error(error);
    return res.status(500).json({
			message: 'Server error.',
		});
  }
};

export default {
  subscribe,
  unsubscribe
}